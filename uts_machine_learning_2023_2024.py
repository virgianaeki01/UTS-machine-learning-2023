# -*- coding: utf-8 -*-
"""UTS Machine Learning 2023/2024.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14EumMra8GShx5iD3sSCjn4sy8EHA-zAC
"""

# Importing libraries
!pip install --upgrade kneed

import numpy as np
import pandas as pd

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import classification_report, silhouette_score
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt
from sklearn import tree
from kneed import KneeLocator
from sklearn.cluster import KMeans
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score

"""Soal No 2."""

# Memisahkan bagian atribut prediktor dengan label data menjadi dua variabel terpisah
url = "https://raw.githubusercontent.com/isnanmulia/lecture-datasets/main/mobileprice_modified.csv"
data = pd.read_csv(url)

# Memisahkan atribut prediktor (fitur) dari label data
X = data.drop(columns=['price_range'])
y = data['price_range']

# Menangani missing values dengan SimpleImputer (strategi: median)
imputer = SimpleImputer(strategy='median')
X_imputed = imputer.fit_transform(X)

# Inisialisasi MinMaxScaler
scaler = MinMaxScaler()

# Menerapkan MinMaxScaler pada atribut prediktor (fitur)
X = scaler.fit_transform(X)

# Menerapkan StandardScaler untuk standarisasi atribut prediktor
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)

# Menampilkan statistik deskriptif sebelum preprocessing
print("Statistik Deskriptif Sebelum Preprocessing:")
print(pd.DataFrame(X, columns=data.columns.drop('price_range')).describe())

# Menampilkan statistik deskriptif setelah pengisian Missing Values dan standarisasi
print("\nStatistik Deskriptif Setelah Pengisian Missing Values dan Standarisasi:")
print(pd.DataFrame(X_scaled, columns=data.columns.drop('price_range')).describe())

"""Soal No 3.
Decision Tree
"""

# Memisahkan atribut prediktor (X_scaled) dari label data (y)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Latih model pada data pelatihan
model.fit(X_train, y_train)

#Melakukan prediksi pada data pengujian
y_pred = model.predict(X_test)

# Menghitung confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Menghitung akurasi
accuracy = accuracy_score(y_test, y_pred)

# Menampilkan confusion matrix
print("Confusion Matrix:")
print(cm)

# Menampilkan akurasi
print("Akurasi: {:.2f}%".format(accuracy * 100))

"""Soal No 4.
Menggunakan Algoritma K-Means
"""

# Inisialisasi model K-Means dengan jumlah cluster yang diinginkan
n_clusters = 4  # Misalnya, ingin 4 cluster
kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)

# Latih model K-Means pada data
kmeans.fit(X_scaled)

# Melakukan prediksi cluster pada data
cluster_labels = kmeans.predict(X_scaled)

# Mendapatkan label cluster untuk setiap sampel
cluster_labels = kmeans.labels_

# Menghitung Silhouette Score dari model clustering
silhouette_avg = silhouette_score(X_scaled, cluster_labels)

# Menampilkan Silhouette Score
print("Silhouette Score:", silhouette_avg)